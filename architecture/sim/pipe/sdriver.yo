                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | #	# Loop header
                            | #	xorq %rax,%rax		# count = 0;
                            | #	andq %rdx,%rdx		# len <= 0?
                            | #	jle Done		# if so, goto Done:
                            | #
                            | #Loop:	mrmovq (%rdi), %r10	# read val from src...
                            | #	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | #	andq %r10, %r10		# val <= 0?
                            | #	jle Npos		# if so, goto Npos:
                            | #	irmovq $1, %r10
                            | #	addq %r10, %rax		# count++
                            | #Npos:	irmovq $1, %r10
                            | #	subq %r10, %rdx		# len--
                            | #	irmovq $8, %r10
                            | #	addq %r10, %rdi		# src++
                            | #	addq %r10, %rsi		# dst++
                            | #	andq %rdx,%rdx		# len > 0?
                            | #	jg Loop			# if so, goto Loop:
                            | 
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		# count = 0;
0x034: 700801000000000000   | 	jmp Loop_judge
                            | 
0x03d:                      | Loop:	
0x03d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val1 from src...
0x047: 50b70800000000000000 | 	mrmovq 8(%rdi),%r11 # read val2 from src+1...
0x051: 50171000000000000000 | 	mrmovq 16(%rdi),%rcx# read val3 from src+2..
0x05b: c0f71800000000000000 | 	iaddq $24, %rdi		# src += 2
                            | 	
0x065: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06f: 62aa                 | 	andq %r10, %r10		# if val1 > 0, count += 1
0x071: 718400000000000000   | 	jle loop_later
0x07a: c0f00100000000000000 | 	iaddq $1, %rax
0x084:                      | loop_later:
0x084: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x08e: 749800000000000000   | 	jne second
0x097: 90                   | 	ret
                            | 
0x098:                      | second:
0x098: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)# ...and store it to dst+8
0x0a2: 62bb                 | 	andq %r11, %r11
0x0a4: 71b700000000000000   | 	jle second_later
0x0ad: c0f00100000000000000 | 	iaddq $1, %rax
0x0b7:                      | second_later:
0x0b7: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len -= 1
0x0c1: 74cb00000000000000   | 	jne third
0x0ca: 90                   | 	ret
                            | 
0x0cb:                      | third:
0x0cb: 40161000000000000000 | 	rmmovq %rcx,16(%rsi)# ...and store it to dst+16
0x0d5: 6211                 | 	andq %rcx, %rcx
0x0d7: 71ea00000000000000   | 	jle third_later
0x0e0: c0f00100000000000000 | 	iaddq $1, %rax
0x0ea:                      | third_later:
0x0ea: c0f61800000000000000 | 	iaddq $24, %rsi 	# dst += 3
0x0f4: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len -= 1
0x0fe: 740801000000000000   | 	jne Loop_judge
0x107: 90                   | 	ret
                            | 
0x108:                      | Loop_judge:
0x108: 6222                 | 	andq %rdx, %rdx		# len > 0?
0x10a: 763d00000000000000   | 	jg Loop				# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x113:                      | Done:
0x113: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x114:                      | End:
                            | #/* $end ncopy-ys */
0x114:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x118:                      | 	.align 8
0x118:                      | src:
0x118: ffffffffffffffff     | 	.quad -1
0x120: feffffffffffffff     | 	.quad -2
0x128: 0300000000000000     | 	.quad 3
0x130: 0400000000000000     | 	.quad 4
0x138: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x140:                      | 	.align 16
0x140:                      | Predest:
0x140: fadebc0000000000     | 	.quad 0xbcdefa
0x148:                      | dest:
0x148: abefcd0000000000     | 	.quad 0xcdefab
0x150: abefcd0000000000     | 	.quad 0xcdefab
0x158: abefcd0000000000     | 	.quad 0xcdefab
0x160: abefcd0000000000     | 	.quad 0xcdefab
0x168:                      | Postdest:
0x168: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x170:                      | .align 8
                            | # Run time stack
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
                            | 
0x1f0:                      | Stack:
